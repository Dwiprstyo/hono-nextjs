datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  bio       String?
  avatar    String?
  followers Follow[]  @relation("UserFollowers")
  following Follow[]  @relation("UserFollowing")
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  image     String?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime  @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}